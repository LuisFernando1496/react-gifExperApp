{"version":3,"sources":["Components/AddCategory.js","Components/GiffGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setadd","useState","inputValue","setValue","onSubmit","e","preventDefault","trim","length","pushText","type","value","onChange","target","GiffGridItem","title","url","className","src","alt","getGiff","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EAlCM,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACnB,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,sBAAMC,SAbQ,SAACC,GAEfA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAEnBR,GAAO,SAAAS,GAAQ,OAAKP,GAAL,mBAAmBO,OAGlCN,EAAS,MAKrB,SAEI,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAxBO,SAACP,GAGbF,EAAUE,EAAEQ,OAAOF,a,QCOZG,EAdM,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAEzB,OACI,sBAAKC,UAAU,8DAAf,UACG,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCHDK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACdN,EADc,iDACkCO,UAAUF,GAD5C,+DAEDG,MAAMR,GAFL,cAEdS,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARtB,kBAWfY,GAXe,4CAAH,sDC6CNM,EA1CC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAalB,ECd2B,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SAE1B,EAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAU,WACNlB,EAASC,GACPkB,MAAM,SAAAC,GAECH,EAAS,CACLV,KAAKa,EACLL,SAAQ,SAItB,CAACd,IAGGe,EDNoBK,CAAa,CAACpB,aAAhCW,EAAZ,EAAOL,KAAYQ,EAAnB,EAAmBA,QAIhB,OACI,qCACA,oBAAIlB,UAAU,wDAAd,SAAuEI,IACtEc,GAAW,mBAAGlB,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAGSe,EAAOH,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADIA,EAAIC,aEMpBW,EAnCM,SAAC,GAAiB,EAAhB/B,MAAiB,IAIxC,EAA6BV,mBAAS,CAAC,cAAvC,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQI,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,OAASA,IACtB,uBACA,6BAEQ2C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,cAAC,EAAD,CAEEA,SAAaA,GADNA,Y,MCrBjCuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3e8d76d8.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nconst  AddCategory = ({setadd}) => {\r\n    const [inputValue, setValue] = useState(''); //uso de useState para modificar el estado del campo input\r\n    const addText = (e) =>//funcion que se despliega al escribir en el input\r\n    {\r\n     \r\n        setValue( e.target.value );//se obtienen el texto del evento, y se cambia el estado esto quiere decir que se guarda en inputValue\r\n    }\r\n\r\n    const submitTex = (e) => //funcion que se despliega cuando se pulsa enter\r\n    {\r\n        e.preventDefault();//evita que el form se envie autometicamente\r\n        if( inputValue.trim().length > 2)\r\n        {\r\n                    setadd(pushText => [inputValue,...pushText]);// se cambia el estado del primer componente\r\n                    //y como no se le paso el arreglo se pues usar otra variable para hacer referencia\r\n                    //al ultimo lemento que contiene el arrglo y agregar el nuevo\r\n                    setValue('');//para que el input quede vacio de nuevo\r\n        }\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={submitTex}> \r\n       \r\n            <input\r\n             type=\"text\"\r\n             value={inputValue}\r\n             onChange={addText} \r\n             />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setadd: PropTypes.func.isRequired\r\n}\r\nexport default AddCategory;\r\n","import React from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst  GiffGridItem= ({title,url}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__delay-0.1s \">\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*GiffGridItem.propTypes = {\r\n\r\n}*/\r\n\r\nexport default GiffGridItem\r\n\r\n","\r\n\r\n\r\n\r\n\r\n export const getGiff = async ( category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=M95v0bvxwyKFSGYkqAdv5r2iLSF0YJ8L`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n  return gifs;\r\n}","//import React, { useEffect, useState } from 'react'\r\n//import PropTypes from 'prop-types'\r\nimport GiffGridItem from './GiffGridItem';\r\n//import { getGiff } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n   /* const [images, setimages] = useState([]);\r\n\r\n \r\n    useEffect(() => {\r\n        getGiff( category)\r\n          .then(setimages) //=== .then(imgs => setimages( imgs));\r\n    }, [category]);//pasarle un arreglo vacio significa que se ejecuta solo una vez al inicio\r\n//si category cambia se vuelve a ejecutar el useEffect\r\n  \r\n*/\r\n\r\n const {data:images,loading} = useFetchGifs({category});\r\n//encodeURI reemplaza los espacios por %\r\n\r\n\r\n    return (\r\n        <> \r\n        <h3 className=\"animate__animated animate__fadeIn animate__delay-0.1s\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n        <div className=\"card-grid\">\r\n            \r\n           \r\n              {  images.map(img =>(\r\n                   <GiffGridItem\r\n                        key ={ img.id }\r\n                       {...img}\r\n                  />\r\n              ))\r\n              }\r\n                \r\n           \r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/*GifGrid.propTypes = {\r\n\r\n}*/\r\n\r\nexport default GifGrid;\r\n\r\n","\r\n//Los hooks no regresan jsx y pueden tener estados para reenderisar los componentes que utilisen este hook \r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport {getGiff} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ({category}) => {\r\n   \r\n    const [state, setstate] = useState({\r\n        data: [], \r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGiff( category)\r\n         .then( imgs => {\r\n          \r\n                 setstate({\r\n                     data:imgs,\r\n                     loading:false\r\n                 });\r\n           \r\n         })\r\n    }, [category]); \r\n    \r\n    \r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './Components/AddCategory';\r\nimport GifGrid from './Components/GifGrid';\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = ({value = 10}) => {\r\n\r\n\r\n//const categories = ['One Punch','Samurai X', 'Dragon ball'];\r\nconst [categories, setadd] = useState(['One Punch']);//funcion useState para definir un arreglo y agregar un nuevo dato\r\n//categories es el arreglo, y setadd es para agregar el nuevo elemento y renderizarlo para mostrar el nuevo dato\r\n/*const handleAdd = (event)=>\r\n{\r\n    setadd([...categories,'Pokemon']);\r\n}*/\r\n// <AddCategory setadd= {setadd}/>  se envia el estado al nuevo componente para poder agregar lo que \r\n//el usuario escriba en elemento input\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setadd= {setadd}/> \r\n            <hr />\r\n            <ol>\r\n                { \r\n                    categories.map(category =>(\r\n                        <GifGrid \r\n                          key= { category }\r\n                          category = { category }\r\n                         />\r\n                        ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n/*GifExpertApp.propTypes = {\r\n\r\n}*/\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}